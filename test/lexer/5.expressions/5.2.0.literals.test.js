import { lex, getCode } from "../../util";

test("5.2.0.literals", async () => {
  const code = await getCode("./manual/5.expressions/5.2.0.literals.elias");
  expect(lex(code)).toEqual([
    { variant: "OperatorToken", value: "/" },
    { variant: "OperatorToken", value: "/" },
    { variant: "IdentToken", value: "Int" },
    { variant: "KeywordToken", value: "let" },
    { variant: "IdentToken", value: "myInt" },
    { variant: "DelimiterToken", value: ":" },
    { variant: "IdentToken", value: "Int" },
    { variant: "DelimiterToken", value: "=" },
    { variant: "IntToken", value: "42" },
    { variant: "DelimiterToken", value: ";" },
    { variant: "OperatorToken", value: "/" },
    { variant: "OperatorToken", value: "/" },
    { variant: "IdentToken", value: "Float" },
    { variant: "KeywordToken", value: "let" },
    { variant: "IdentToken", value: "myFloat" },
    { variant: "DelimiterToken", value: ":" },
    { variant: "IdentToken", value: "Float" },
    { variant: "DelimiterToken", value: "=" },
    { variant: "FloatToken", value: "3.14" },
    { variant: "DelimiterToken", value: ";" },
    { variant: "OperatorToken", value: "/" },
    { variant: "OperatorToken", value: "/" },
    { variant: "IdentToken", value: "Bool" },
    { variant: "KeywordToken", value: "let" },
    { variant: "IdentToken", value: "myBool" },
    { variant: "DelimiterToken", value: ":" },
    { variant: "IdentToken", value: "Bool" },
    { variant: "DelimiterToken", value: "=" },
    { variant: "KeywordToken", value: "true" },
    { variant: "DelimiterToken", value: ";" },
    { variant: "OperatorToken", value: "/" },
    { variant: "OperatorToken", value: "/" },
    { variant: "IdentToken", value: "EReg" },
    { variant: "DelimiterToken", value: "(" },
    { variant: "IdentToken", value: "Regular" },
    { variant: "IdentToken", value: "Expression" },
    { variant: "DelimiterToken", value: ")" },
    { variant: "KeywordToken", value: "let" },
    { variant: "IdentToken", value: "myReg" },
    { variant: "DelimiterToken", value: ":" },
    { variant: "IdentToken", value: "EReg" },
    { variant: "DelimiterToken", value: "=" },
    { variant: "OperatorToken", value: "~" },
    { variant: "OperatorToken", value: "/" },
    { variant: "OperatorToken", value: "^" },
    { variant: "IdentToken", value: "\\d" },
    { variant: "OperatorToken", value: "+" },
    { variant: "IdentToken", value: "$" },
    { variant: "OperatorToken", value: "/" },
    { variant: "DelimiterToken", value: ";" },
    { variant: "OperatorToken", value: "/" },
    { variant: "OperatorToken", value: "/" },
    { variant: "IdentToken", value: "String" },
    { variant: "KeywordToken", value: "let" },
    { variant: "IdentToken", value: "myString" },
    { variant: "DelimiterToken", value: ":" },
    { variant: "IdentToken", value: "String" },
    { variant: "DelimiterToken", value: "=" },
    { variant: "StringToken", value: "Hello, Eliascript!" },
    { variant: "DelimiterToken", value: ";" },
    { variant: "OperatorToken", value: "/" },
    { variant: "OperatorToken", value: "/" },
    { variant: "IdentToken", value: "Array" },
    { variant: "OperatorToken", value: "<" },
    { variant: "IdentToken", value: "T" },
    { variant: "OperatorToken", value: ">" },
    { variant: "KeywordToken", value: "let" },
    { variant: "IdentToken", value: "myArray" },
    { variant: "DelimiterToken", value: ":" },
    { variant: "IdentToken", value: "Array" },
    { variant: "OperatorToken", value: "<" },
    { variant: "IdentToken", value: "Int" },
    { variant: "OperatorToken", value: ">" },
    { variant: "DelimiterToken", value: "=" },
    { variant: "DelimiterToken", value: "[" },
    { variant: "IntToken", value: "1" },
    { variant: "DelimiterToken", value: "," },
    { variant: "IntToken", value: "2" },
    { variant: "DelimiterToken", value: "," },
    { variant: "IntToken", value: "3" },
    { variant: "DelimiterToken", value: "," },
    { variant: "IntToken", value: "4" },
    { variant: "DelimiterToken", value: "," },
    { variant: "IntToken", value: "5" },
    { variant: "DelimiterToken", value: "]" },
    { variant: "DelimiterToken", value: ";" },
    { variant: "OperatorToken", value: "/" },
    { variant: "OperatorToken", value: "/" },
    { variant: "IdentToken", value: "Map" },
    { variant: "OperatorToken", value: "<" },
    { variant: "IdentToken", value: "T" },
    { variant: "DelimiterToken", value: "," },
    { variant: "IdentToken", value: "U" },
    { variant: "OperatorToken", value: ">" },
    { variant: "KeywordToken", value: "let" },
    { variant: "IdentToken", value: "myMap" },
    { variant: "DelimiterToken", value: ":" },
    { variant: "IdentToken", value: "Map" },
    { variant: "OperatorToken", value: "<" },
    { variant: "IdentToken", value: "String" },
    { variant: "DelimiterToken", value: "," },
    { variant: "IdentToken", value: "Int" },
    { variant: "OperatorToken", value: ">" },
    { variant: "DelimiterToken", value: "=" },
    { variant: "KeywordToken", value: "new" },
    { variant: "IdentToken", value: "Map" },
    { variant: "DelimiterToken", value: "(" },
    { variant: "DelimiterToken", value: ")" },
    { variant: "DelimiterToken", value: ";" },
    { variant: "IdentToken", value: "myMap" },
    { variant: "DelimiterToken", value: "." },
    { variant: "IdentToken", value: "set" },
    { variant: "DelimiterToken", value: "(" },
    { variant: "StringToken", value: "one" },
    { variant: "DelimiterToken", value: "," },
    { variant: "IntToken", value: "1" },
    { variant: "DelimiterToken", value: ")" },
    { variant: "DelimiterToken", value: ";" },
    { variant: "IdentToken", value: "myMap" },
    { variant: "DelimiterToken", value: "." },
    { variant: "IdentToken", value: "set" },
    { variant: "DelimiterToken", value: "(" },
    { variant: "StringToken", value: "two" },
    { variant: "DelimiterToken", value: "," },
    { variant: "IntToken", value: "2" },
    { variant: "DelimiterToken", value: ")" },
    { variant: "DelimiterToken", value: ";" },
    { variant: "OperatorToken", value: "/" },
    { variant: "OperatorToken", value: "/" },
    { variant: "IdentToken", value: "IntIterator" },
    { variant: "KeywordToken", value: "for" },
    { variant: "IdentToken", value: "i" },
    { variant: "KeywordToken", value: "in" },
    { variant: "IntToken", value: "0" },
    { variant: "OperatorToken", value: "..." },
    { variant: "IntToken", value: "10" },
    { variant: "KeywordToken", value: "print" },
    { variant: "DelimiterToken", value: "(" },
    { variant: "IdentToken", value: "i" },
    { variant: "DelimiterToken", value: ")" },
    { variant: "DelimiterToken", value: ";" },
    { variant: "KeywordToken", value: "end" },
  ]);
});
